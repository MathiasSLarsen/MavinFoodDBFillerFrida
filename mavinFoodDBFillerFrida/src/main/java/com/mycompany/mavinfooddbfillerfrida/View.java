/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.mavinfooddbfillerfrida;

import com.mycompany.mavinfooddbfillerfrida.model.Subject;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTextField;


/**
 *
 * @author Lenovo
 */
public class View extends javax.swing.JFrame {

     DefaultComboBoxModel allergens = new DefaultComboBoxModel( new String[] {"No", "Yes", "Maybe", "Unknown"});
     DefaultComboBoxModel supermarkedGroups = new DefaultComboBoxModel( new String[] {"Fruits and vegetables", "Meat", "Fish", "Frozen", "Dairy", "Colonial", "Candy", "Drinks"});
     DefaultComboBoxModel colors = new DefaultComboBoxModel( new String[] {"White", "Yellow", "Green", "Brown", "Red", "Purple", "Orange", "Black"});
     Subject subject;
     DTO dto = new DTO();
     XMLParser xml = new XMLParser();
     Save save = new Save();
     private int savePoint;
     /**
     * Creates new form View
     */
    public View() throws IOException {
        xml.Makeobjects();
        savePoint = save.load();
        subject = xml.subjectArray.get(savePoint);
        initComponents();
        setTextArea();
        setModel();
    }
    
    private void setModel(){
        this.glutenComboBox.setModel(allergens);
        this.milkComboBox.setModel(allergens);
        this.eggComboBox.setModel(allergens);
        this.peanutComboBox.setModel(allergens);
        this.soyComboBox.setModel(allergens);
        this.wheatComboBox.setModel(allergens);
        this.fishComboBox.setModel(allergens);
        this.shellFishComboBox.setModel(allergens);
        this.sesamComboBox.setModel(allergens);
        this.supermarkedGroupComboBox.setModel(supermarkedGroups);
        this.colorComboBox.setModel(colors);
    }
    
    private void setTextArea(){
        this.jTextArea1.setText(subject.nameLang.toString());
        this.jTextArea1.append(subject.toString());
        this.jTextArea1.append(subject.vitamins.toString());
        this.jTextArea1.append(subject.minerals.toString());
        this.jTextArea1.append(subject.organicAcids.toString());
        this.jTextArea1.append(subject.carbohydrates.toString());
        this.jTextArea1.append(subject.saturatedFattyAcids.toString());
        this.jTextArea1.append(subject.monounsaturatedFattyAcids.toString());
        this.jTextArea1.append(subject.polyunsaturatedFattyAcids.toString());
        this.jTextArea1.append(subject.monosaturatedFattyAcids.toString());
        this.jTextArea1.append(subject.fattyAcidsSums.toString());
        this.jTextArea1.append(subject.sterols.toString());
        this.jTextArea1.append(subject.aminoAcids.toString());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        test = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        uploadButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        milkComboBox = new javax.swing.JComboBox<>();
        soyComboBox = new javax.swing.JComboBox<>();
        peanutComboBox = new javax.swing.JComboBox<>();
        glutenComboBox = new javax.swing.JComboBox<>();
        eggComboBox = new javax.swing.JComboBox<>();
        wheatComboBox = new javax.swing.JComboBox<>();
        fishComboBox = new javax.swing.JComboBox<>();
        shellFishComboBox = new javax.swing.JComboBox<>();
        sesamComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        colorComboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        supermarkedGroupComboBox = new javax.swing.JComboBox<>();
        addButton = new javax.swing.JButton();
        colorsLable = new javax.swing.JLabel();
        removeButton = new javax.swing.JButton();
        isIngredient = new javax.swing.JButton();
        isingredientLable = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        foodGroupTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        test.setViewportView(jTextArea1);

        uploadButton.setText("Upload");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Milk");

        jLabel2.setText("Soy");

        jLabel3.setText("Peanuts");

        jLabel4.setText("Gluten");

        jLabel5.setText("Egg");

        jLabel6.setText("Wheat");

        jLabel7.setText("Fish");

        jLabel8.setText("ShellFish");

        jLabel9.setText("Sesam");

        milkComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        milkComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                milkComboBoxActionPerformed(evt);
            }
        });

        soyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        peanutComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        glutenComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        eggComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        wheatComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        fishComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        shellFishComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        sesamComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel10.setText("Color");

        colorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel11.setText("SupermarketGroup");

        supermarkedGroupComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        addButton.setText("Add Color");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        colorsLable.setText("         ");

        removeButton.setText("Remove color");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        isIngredient.setText("Is Ingredient");
        isIngredient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isIngredientActionPerformed(evt);
            }
        });

        isingredientLable.setText("false");

        jLabel12.setText("Food Group");

        foodGroupTextField.setText("jTextField1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(test, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(uploadButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sesamComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shellFishComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fishComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(foodGroupTextField))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(wheatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(isingredientLable))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(eggComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(isIngredient))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(glutenComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(colorsLable))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(milkComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel11))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(soyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel10)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(colorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(supermarkedGroupComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(peanutComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(addButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(removeButton)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(milkComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(supermarkedGroupComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(soyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(colorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(peanutComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addButton)
                            .addComponent(removeButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(glutenComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(colorsLable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(eggComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(isIngredient)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(wheatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(isingredientLable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(fishComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(foodGroupTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(shellFishComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(sesamComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(uploadButton))
                    .addComponent(test))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        subject.allergens.setGluten(this.glutenComboBox.getSelectedIndex());
        subject.allergens.setMilk(this.milkComboBox.getSelectedIndex());
        subject.allergens.setEgg(this.eggComboBox.getSelectedIndex());
        subject.allergens.setPeanut(this.peanutComboBox.getSelectedIndex());
        subject.allergens.setSoy(this.soyComboBox.getSelectedIndex());
        subject.allergens.setWheat(this.wheatComboBox.getSelectedIndex());
        subject.allergens.setFish(this.fishComboBox.getSelectedIndex());
        subject.allergens.setShellfish(this.shellFishComboBox.getSelectedIndex());
        subject.allergens.setSesame(this.sesamComboBox.getSelectedIndex());
        subject.setFoodGroup(this.foodGroupTextField.getText());
        
        if(subject.getIsIngredient() == true){
            try {
                dto.uploadIngredient(subject.getName(), subject.getKj(), subject.getKcal(), subject.getTotalN(), subject.getProtien(), subject.getCarbohydrates(), subject.getAddedSugar(), subject.getFat(), subject.getFiber(), subject.getAlcohol(), subject.getAsh(), subject.getDryMatter(), subject.getWater(), subject.getDB());
                subject.setIngredient_idIngredient(dto.getIngridentId(subject.getName()));
                dto.uploadAllergens(subject.allergens.getGluten(), subject.allergens.getMilk(), subject.allergens.getEgg(), subject.allergens.getPeanut(), subject.allergens.getSoy(), subject.allergens.getWheat(), subject.allergens.getFish(), subject.allergens.getShellfish(), subject.allergens.getSesame(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                dto.uploadAminoAcids(subject.aminoAcids.getIsoleucine(), subject.aminoAcids.getLeucine(), subject.aminoAcids.getLysine(), subject.aminoAcids.getMethionine(), subject.aminoAcids.getCystine(), subject.aminoAcids.getPhenylalanine(), subject.aminoAcids.getTyrosine(), subject.aminoAcids.getThreonine(), subject.aminoAcids.getTryptophan(), subject.aminoAcids.getValin(), subject.aminoAcids.getArginine(), subject.aminoAcids.getHistidine(), subject.aminoAcids.getAlanine(), subject.aminoAcids.getAsparticAcid(), subject.aminoAcids.getGlutamicAcid(), subject.aminoAcids.getGlycine(), subject.aminoAcids.getProline(), subject.aminoAcids.getHydroxyproline(), subject.aminoAcids.getSerin(), subject.aminoAcids.getBetaCarotene(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                dto.uploadBiogeneamines(subject.biogeneamines.getHistamine(), subject.biogeneamines.getTyramine(), subject.biogeneamines.getPhenylethylamine(), subject.biogeneamines.getPutrescine(), subject.biogeneamines.getCadaverine(), subject.biogeneamines.getSpermine(), subject.biogeneamines.getSpermidine(), subject.biogeneamines.getSerotonin(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                dto.uploadFactors(subject.factors.getWaste(), subject.factors.getProteinConversionFactor(), subject.factors.getFattyAcidConversionFactor(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                dto.uploadFattyacidssums(subject.fattyAcidsSums.getOtherFattyAcids(), subject.fattyAcidsSums.getSumSaturated(), subject.fattyAcidsSums.getSumMonounsaturated(), subject.fattyAcidsSums.getSumPolyunsaturated(), subject.fattyAcidsSums.getTransFattyAcidsTotal(), subject.fattyAcidsSums.getFattyAcidsTotal(), subject.fattyAcidsSums.getSumN3FattyAcids(), subject.fattyAcidsSums.getSumN6FattyAcids(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                dto.uploadMinerals(subject.minerals.getSulfur(), subject.minerals.getChloride(), subject.minerals.getSodium(), subject.minerals.getPotassium(), subject.minerals.getCalcium(), subject.minerals.getMagnesium(), subject.minerals.getPhosphorus(), subject.minerals.getIron(), subject.minerals.getCopper(), subject.minerals.getZink(), subject.minerals.getIodine(), subject.minerals.getManganese(), subject.minerals.getChromium(), subject.minerals.getSelenium(), subject.minerals.getMolybdenum(), subject.minerals.getColbalt(), subject.minerals.getNickel(), subject.minerals.getFluoron(), subject.minerals.getSilicon(), subject.minerals.getRubidium(), subject.minerals.getAluminum(), subject.minerals.getBoron(), subject.minerals.getBromine(), subject.minerals.getMercury(), subject.minerals.getArsenic(), subject.minerals.getCadmium(), subject.minerals.getLead(), subject.minerals.getTin(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                dto.uploadMonosaturatedfattyacids(subject.monosaturatedFattyAcids.getC141n5(), subject.monosaturatedFattyAcids.getC151(), subject.monosaturatedFattyAcids.getC161n7(), subject.monosaturatedFattyAcids.getC171n7(), subject.monosaturatedFattyAcids.getC181n9(), subject.monosaturatedFattyAcids.getC181n7(), subject.monosaturatedFattyAcids.getC201n9(), subject.monosaturatedFattyAcids.getC201n11(), subject.monosaturatedFattyAcids.getC221n9(), subject.monosaturatedFattyAcids.getC221n11(), subject.monosaturatedFattyAcids.getC241n9(), subject.monosaturatedFattyAcids.getOther(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                dto.uploadMonounsaturatedfattyacids(subject.monounsaturatedFattyAcids.getC141Trans9(), subject.monounsaturatedFattyAcids.getC161Trans(), subject.monounsaturatedFattyAcids.getC181TransN9(), subject.monounsaturatedFattyAcids.getC201Trans(), subject.monounsaturatedFattyAcids.getC221Trans(), subject.monounsaturatedFattyAcids.getC182TransUndifferentiated(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                dto.uploadName(subject.nameLang.getDk(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                dto.uploadOrganicAcids(subject.organicAcids.getlLacticAcid(), subject.organicAcids.getdLacticAcid(), subject.organicAcids.getLaticAcidTotal(), subject.organicAcids.getCitricAcid(), subject.organicAcids.getOxalicAcid(), subject.organicAcids.getMalicAcid(), subject.organicAcids.getAceticAcid(), subject.organicAcids.getBenzoicAcid(), subject.organicAcids.getSorbicAcid(), subject.organicAcids.getPropionic(), subject.organicAcids.getOrganicAcidsTotal(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                dto.uploadPolyunsaturatedfattyacids(subject.polyunsaturatedFattyAcids.getC182n6(), subject.polyunsaturatedFattyAcids.getC182(), subject.polyunsaturatedFattyAcids.getC183n3(), subject.polyunsaturatedFattyAcids.getC183n6(), subject.polyunsaturatedFattyAcids.getC184n3(), subject.polyunsaturatedFattyAcids.getC202n6(), subject.polyunsaturatedFattyAcids.getC222n6(), subject.polyunsaturatedFattyAcids.getC224n6(), subject.polyunsaturatedFattyAcids.getC225n6(), subject.polyunsaturatedFattyAcids.getC203n3(), subject.polyunsaturatedFattyAcids.getC204n3(), subject.polyunsaturatedFattyAcids.getC204n6(), subject.polyunsaturatedFattyAcids.getC203n6(), subject.polyunsaturatedFattyAcids.getC205n3(), subject.polyunsaturatedFattyAcids.getC225n3(), subject.polyunsaturatedFattyAcids.getC226n3(), subject.polyunsaturatedFattyAcids.getOther(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                dto.uploadSaturatedfattyacids(subject.saturatedFattyAcids.getC40(), subject.saturatedFattyAcids.getC60(), subject.saturatedFattyAcids.getC80(), subject.saturatedFattyAcids.getC100(), subject.saturatedFattyAcids.getC120(), subject.saturatedFattyAcids.getC130(), subject.saturatedFattyAcids.getC140(), subject.saturatedFattyAcids.getC150(), subject.saturatedFattyAcids.getC160(), subject.saturatedFattyAcids.getC170(), subject.saturatedFattyAcids.getC180(), subject.saturatedFattyAcids.getC200(), subject.saturatedFattyAcids.getC210(), subject.saturatedFattyAcids.getC220(), subject.saturatedFattyAcids.getC230(), subject.saturatedFattyAcids.getC240(), subject.saturatedFattyAcids.getOther(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                dto.uploadSterols(subject.sterols.getCholesterol(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                dto.uploadSupermarkedgroup(subject.supermarkedGroup.getName(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                dto.uploadVariety(subject.variety.getName(), subject.getIngredient_idIngredient());
                dto.uploadVitamins(subject.vitamins.getVitaminA(), subject.vitamins.getRetinol(), subject.vitamins.getBetaCarotene(), subject.vitamins.getVitaminD(), subject.vitamins.getD3Cholecalciferol(), subject.vitamins.getD2Ergocalciferol(), subject.vitamins.get25hydroxycholecalciferol(), subject.vitamins.getVitaminE(), subject.vitamins.getAlphaTocopherol(), subject.vitamins.getGammaTocopherol(), subject.vitamins.getDeltaTocopherol(), subject.vitamins.getAlphaTokotrienol(), subject.vitamins.getVitaminK1(), subject.vitamins.getVitaminB1(), subject.vitamins.getThiamine(), subject.vitamins.getHydroxyethylthiazole(), subject.vitamins.getVitaminB2Riboflavin(), subject.vitamins.getNiacinEquivalent(), subject.vitamins.getNiacin(), subject.vitamins.getVitaminB6(), subject.vitamins.getPantothenic(), subject.vitamins.getBiotin(), subject.vitamins.getFolate(), subject.vitamins.getB12(), subject.vitamins.getcVitamin(), subject.vitamins.getLAscorbicAcid(), subject.vitamins.getLDehydroascorbicAcid(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                dto.uploadcarbohydrates(subject.carbohydrates.getFructose(), subject.carbohydrates.getGalactose(), subject.carbohydrates.getGlucose(), subject.carbohydrates.getMonosaccharidesTotal(), subject.carbohydrates.getLactose(), subject.carbohydrates.getMaltose(), subject.carbohydrates.getSucrose(), subject.carbohydrates.getDisaccharidesTotal(), subject.carbohydrates.getMaltotriose(), subject.carbohydrates.getRaffinose(), subject.carbohydrates.getOtherSugars(), subject.carbohydrates.getSugarsTotal(), subject.carbohydrates.getSorbitol(), subject.carbohydrates.getMannitol(), subject.carbohydrates.getInositol(), subject.carbohydrates.getMaltitol(), subject.carbohydrates.getSugarAlcoholsTotal(), subject.carbohydrates.getStarch(), subject.carbohydrates.getIDF(), subject.carbohydrates.getSDFP(), subject.carbohydrates.getSDFS(), subject.carbohydrates.getaHexoses(), subject.carbohydrates.getbThePentoses(), subject.carbohydrates.getcUronicAcids(), subject.carbohydrates.getCellulose(), subject.carbohydrates.getLignin(), subject.carbohydrates.getCrudeFibers(), subject.carbohydrates.getNaturalDietFibre(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                for(int i = 0; i < subject.color.colorSize(); i++){
                    dto.uploadcolor(subject.color.getColor(i), subject.getIngredient_idIngredient(), subject.getIsIngredient());
                } 
                dto.uploadfoodGroup(subject.getFoodGroup(), subject.getIngredient_idIngredient(), subject.getIsIngredient());
            } catch (Exception ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            try {
                dto.uploadProduct(subject.getName(), subject.getKj(), subject.getKcal(), subject.getTotalN(), subject.getProtien(), subject.getCarbohydrates(), subject.getAddedSugar(), subject.getFat(), subject.getFiber(), subject.getAlcohol(), subject.getAsh(), subject.getDryMatter(), subject.getWater(), subject.getDB());
                subject.setProduct_idproduct(dto.getProductId(subject.getName()));
                dto.uploadAllergens(subject.allergens.getGluten(), subject.allergens.getMilk(), subject.allergens.getEgg(), subject.allergens.getPeanut(), subject.allergens.getSoy(), subject.allergens.getWheat(), subject.allergens.getFish(), subject.allergens.getShellfish(), subject.allergens.getSesame(), subject.getProduct_idproduct(), subject.getIsIngredient());
                dto.uploadAminoAcids(subject.aminoAcids.getIsoleucine(), subject.aminoAcids.getLeucine(), subject.aminoAcids.getLysine(), subject.aminoAcids.getMethionine(), subject.aminoAcids.getCystine(), subject.aminoAcids.getPhenylalanine(), subject.aminoAcids.getTyrosine(), subject.aminoAcids.getThreonine(), subject.aminoAcids.getTryptophan(), subject.aminoAcids.getValin(), subject.aminoAcids.getArginine(), subject.aminoAcids.getHistidine(), subject.aminoAcids.getAlanine(), subject.aminoAcids.getAsparticAcid(), subject.aminoAcids.getGlutamicAcid(), subject.aminoAcids.getGlycine(), subject.aminoAcids.getProline(), subject.aminoAcids.getHydroxyproline(), subject.aminoAcids.getSerin(), subject.aminoAcids.getBetaCarotene(), subject.getProduct_idproduct(), subject.getIsIngredient());
                dto.uploadBiogeneamines(subject.biogeneamines.getHistamine(), subject.biogeneamines.getTyramine(), subject.biogeneamines.getPhenylethylamine(), subject.biogeneamines.getPutrescine(), subject.biogeneamines.getCadaverine(), subject.biogeneamines.getSpermine(), subject.biogeneamines.getSpermidine(), subject.biogeneamines.getSerotonin(), subject.getProduct_idproduct(), subject.getIsIngredient());
                dto.uploadFactors(subject.factors.getWaste(), subject.factors.getProteinConversionFactor(), subject.factors.getFattyAcidConversionFactor(), subject.getProduct_idproduct(), subject.getIsIngredient());
                dto.uploadFattyacidssums(subject.fattyAcidsSums.getOtherFattyAcids(), subject.fattyAcidsSums.getSumSaturated(), subject.fattyAcidsSums.getSumMonounsaturated(), subject.fattyAcidsSums.getSumPolyunsaturated(), subject.fattyAcidsSums.getTransFattyAcidsTotal(), subject.fattyAcidsSums.getFattyAcidsTotal(), subject.fattyAcidsSums.getSumN3FattyAcids(), subject.fattyAcidsSums.getSumN6FattyAcids(), subject.getProduct_idproduct(), subject.getIsIngredient());
                dto.uploadMinerals(subject.minerals.getSulfur(), subject.minerals.getChloride(), subject.minerals.getSodium(), subject.minerals.getPotassium(), subject.minerals.getCalcium(), subject.minerals.getMagnesium(), subject.minerals.getPhosphorus(), subject.minerals.getIron(), subject.minerals.getCopper(), subject.minerals.getZink(), subject.minerals.getIodine(), subject.minerals.getManganese(), subject.minerals.getChromium(), subject.minerals.getSelenium(), subject.minerals.getMolybdenum(), subject.minerals.getColbalt(), subject.minerals.getNickel(), subject.minerals.getFluoron(), subject.minerals.getSilicon(), subject.minerals.getRubidium(), subject.minerals.getAluminum(), subject.minerals.getBoron(), subject.minerals.getBromine(), subject.minerals.getMercury(), subject.minerals.getArsenic(), subject.minerals.getCadmium(), subject.minerals.getLead(), subject.minerals.getTin(), subject.getProduct_idproduct(), subject.getIsIngredient());
                dto.uploadMonosaturatedfattyacids(subject.monosaturatedFattyAcids.getC141n5(), subject.monosaturatedFattyAcids.getC151(), subject.monosaturatedFattyAcids.getC161n7(), subject.monosaturatedFattyAcids.getC171n7(), subject.monosaturatedFattyAcids.getC181n9(), subject.monosaturatedFattyAcids.getC181n7(), subject.monosaturatedFattyAcids.getC201n9(), subject.monosaturatedFattyAcids.getC201n11(), subject.monosaturatedFattyAcids.getC221n9(), subject.monosaturatedFattyAcids.getC221n11(), subject.monosaturatedFattyAcids.getC241n9(), subject.monosaturatedFattyAcids.getOther(), subject.getProduct_idproduct(), subject.getIsIngredient());
                dto.uploadMonounsaturatedfattyacids(subject.monounsaturatedFattyAcids.getC141Trans9(), subject.monounsaturatedFattyAcids.getC161Trans(), subject.monounsaturatedFattyAcids.getC181TransN9(), subject.monounsaturatedFattyAcids.getC201Trans(), subject.monounsaturatedFattyAcids.getC221Trans(), subject.monounsaturatedFattyAcids.getC182TransUndifferentiated(), subject.getProduct_idproduct(), subject.getIsIngredient());
                dto.uploadName(subject.nameLang.getDk(), subject.getProduct_idproduct(), subject.getIsIngredient());
                dto.uploadOrganicAcids(subject.organicAcids.getlLacticAcid(), subject.organicAcids.getdLacticAcid(), subject.organicAcids.getLaticAcidTotal(), subject.organicAcids.getCitricAcid(), subject.organicAcids.getOxalicAcid(), subject.organicAcids.getMalicAcid(), subject.organicAcids.getAceticAcid(), subject.organicAcids.getBenzoicAcid(), subject.organicAcids.getSorbicAcid(), subject.organicAcids.getPropionic(), subject.organicAcids.getOrganicAcidsTotal(), subject.getProduct_idproduct(), subject.getIsIngredient());
                dto.uploadPolyunsaturatedfattyacids(subject.polyunsaturatedFattyAcids.getC182n6(), subject.polyunsaturatedFattyAcids.getC182(), subject.polyunsaturatedFattyAcids.getC183n3(), subject.polyunsaturatedFattyAcids.getC183n6(), subject.polyunsaturatedFattyAcids.getC184n3(), subject.polyunsaturatedFattyAcids.getC202n6(), subject.polyunsaturatedFattyAcids.getC222n6(), subject.polyunsaturatedFattyAcids.getC224n6(), subject.polyunsaturatedFattyAcids.getC225n6(), subject.polyunsaturatedFattyAcids.getC203n3(), subject.polyunsaturatedFattyAcids.getC204n3(), subject.polyunsaturatedFattyAcids.getC204n6(), subject.polyunsaturatedFattyAcids.getC203n6(), subject.polyunsaturatedFattyAcids.getC205n3(), subject.polyunsaturatedFattyAcids.getC225n3(), subject.polyunsaturatedFattyAcids.getC226n3(), subject.polyunsaturatedFattyAcids.getOther(), subject.getProduct_idproduct(), subject.getIsIngredient());
                dto.uploadSaturatedfattyacids(subject.saturatedFattyAcids.getC40(), subject.saturatedFattyAcids.getC60(), subject.saturatedFattyAcids.getC80(), subject.saturatedFattyAcids.getC100(), subject.saturatedFattyAcids.getC120(), subject.saturatedFattyAcids.getC130(), subject.saturatedFattyAcids.getC140(), subject.saturatedFattyAcids.getC150(), subject.saturatedFattyAcids.getC160(), subject.saturatedFattyAcids.getC170(), subject.saturatedFattyAcids.getC180(), subject.saturatedFattyAcids.getC200(), subject.saturatedFattyAcids.getC210(), subject.saturatedFattyAcids.getC220(), subject.saturatedFattyAcids.getC230(), subject.saturatedFattyAcids.getC240(), subject.saturatedFattyAcids.getOther(), subject.getProduct_idproduct(), subject.getIsIngredient());
                dto.uploadSterols(subject.sterols.getCholesterol(), subject.getProduct_idproduct(), subject.getIsIngredient());
                dto.uploadSupermarkedgroup(subject.supermarkedGroup.getName(), subject.getProduct_idproduct(), subject.getIsIngredient());
                dto.uploadVitamins(subject.vitamins.getVitaminA(), subject.vitamins.getRetinol(), subject.vitamins.getBetaCarotene(), subject.vitamins.getVitaminD(), subject.vitamins.getD3Cholecalciferol(), subject.vitamins.getD2Ergocalciferol(), subject.vitamins.get25hydroxycholecalciferol(), subject.vitamins.getVitaminE(), subject.vitamins.getAlphaTocopherol(), subject.vitamins.getGammaTocopherol(), subject.vitamins.getDeltaTocopherol(), subject.vitamins.getAlphaTokotrienol(), subject.vitamins.getVitaminK1(), subject.vitamins.getVitaminB1(), subject.vitamins.getThiamine(), subject.vitamins.getHydroxyethylthiazole(), subject.vitamins.getVitaminB2Riboflavin(), subject.vitamins.getNiacinEquivalent(), subject.vitamins.getNiacin(), subject.vitamins.getVitaminB6(), subject.vitamins.getPantothenic(), subject.vitamins.getBiotin(), subject.vitamins.getFolate(), subject.vitamins.getB12(), subject.vitamins.getcVitamin(), subject.vitamins.getLAscorbicAcid(), subject.vitamins.getLDehydroascorbicAcid(), subject.getProduct_idproduct(), subject.getIsIngredient());
                dto.uploadcarbohydrates(subject.carbohydrates.getFructose(), subject.carbohydrates.getGalactose(), subject.carbohydrates.getGlucose(), subject.carbohydrates.getMonosaccharidesTotal(), subject.carbohydrates.getLactose(), subject.carbohydrates.getMaltose(), subject.carbohydrates.getSucrose(), subject.carbohydrates.getDisaccharidesTotal(), subject.carbohydrates.getMaltotriose(), subject.carbohydrates.getRaffinose(), subject.carbohydrates.getOtherSugars(), subject.carbohydrates.getSugarsTotal(), subject.carbohydrates.getSorbitol(), subject.carbohydrates.getMannitol(), subject.carbohydrates.getInositol(), subject.carbohydrates.getMaltitol(), subject.carbohydrates.getSugarAlcoholsTotal(), subject.carbohydrates.getStarch(), subject.carbohydrates.getIDF(), subject.carbohydrates.getSDFP(), subject.carbohydrates.getSDFS(), subject.carbohydrates.getaHexoses(), subject.carbohydrates.getbThePentoses(), subject.carbohydrates.getcUronicAcids(), subject.carbohydrates.getCellulose(), subject.carbohydrates.getLignin(), subject.carbohydrates.getCrudeFibers(), subject.carbohydrates.getNaturalDietFibre(), subject.getProduct_idproduct(), subject.getIsIngredient());
                for(int i = 0; i < subject.color.colorSize(); i++){
                    dto.uploadcolor(subject.color.getColor(i), subject.getProduct_idproduct(), subject.getIsIngredient());
                } 
                dto.uploadfoodGroup(subject.getFoodGroup(), subject.getProduct_idproduct(), subject.getIsIngredient());
            } catch (Exception ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
         try {
             savePoint = savePoint +1;
             save.save(savePoint);
         } catch (IOException ex) {
             Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
         }
        subject = xml.subjectArray.get(savePoint);
        setTextArea();
        setModel();
        
        
    }//GEN-LAST:event_uploadButtonActionPerformed

    private void milkComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_milkComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_milkComboBoxActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        subject.color.addColor(this.colorComboBox.getSelectedItem().toString());
        this.colorsLable.setText(subject.color.toString());
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        subject.color.removeColor();
        this.colorsLable.setText(subject.color.toString());
    }//GEN-LAST:event_removeButtonActionPerformed

    private void isIngredientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isIngredientActionPerformed
        if(subject.getIsIngredient() == false){
            subject.setIsIngredient(true);
            this.isingredientLable.setText("true");
        }else{
            subject.setIsIngredient(false);
            this.isingredientLable.setText("false");
        }
    }//GEN-LAST:event_isIngredientActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new View().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JComboBox<String> colorComboBox;
    private javax.swing.JLabel colorsLable;
    private javax.swing.JComboBox<String> eggComboBox;
    private javax.swing.JComboBox<String> fishComboBox;
    private javax.swing.JTextField foodGroupTextField;
    private javax.swing.JComboBox<String> glutenComboBox;
    private javax.swing.JButton isIngredient;
    private javax.swing.JLabel isingredientLable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JComboBox<String> milkComboBox;
    private javax.swing.JComboBox<String> peanutComboBox;
    private javax.swing.JButton removeButton;
    private javax.swing.JComboBox<String> sesamComboBox;
    private javax.swing.JComboBox<String> shellFishComboBox;
    private javax.swing.JComboBox<String> soyComboBox;
    private javax.swing.JComboBox<String> supermarkedGroupComboBox;
    private javax.swing.JScrollPane test;
    private javax.swing.JButton uploadButton;
    private javax.swing.JComboBox<String> wheatComboBox;
    // End of variables declaration//GEN-END:variables
}
